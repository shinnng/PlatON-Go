from functools import wraps

from alaya import Web3
from alaya.packages.platon_account.account import Account
from alaya.packages.platon_account.signers.local import LocalAccount
from alaya.packages.platon_keys.utils.address import TESTNETHRP
from alaya.utils.contracts import find_matching_fn_abi

from environment.node import Node
from tests.lib import Client


def deploy(web3: Web3, bytecode: str, abi: str, account: LocalAccount, **constructor_args):
    # account = Account.privateKeyToAccount(deployer)
    nonce = web3.eth.getTransactionCount(account.address)
    contract = web3.eth.contract(abi=abi, bytecode=bytecode)
    transaction = {
        'gas': 4012388,
        'gasPrice': 100000000,
        "chainId": 201018,
        "nonce": nonce,
    }
    print(f'#### constructor args: {constructor_args}')
    data = contract._encode_constructor_data(kwargs=constructor_args)
    transaction["data"] = data
    print(f'#### transaction: {transaction}')
    print(f'#### deployer: {account.address}')
    signed_tx = web3.eth.account.signTransaction(transaction, account.privateKey).rawTransaction
    tx_hex = web3.eth.sendRawTransaction(signed_tx)
    print('trans_hex is :{}'.format(tx_hex.hex()))
    receipt = web3.waitForTransactionReceipt(tx_hex)
    print('contractAddress is :{}'.format(receipt['contractAddress']))
    address = receipt['contractAddress']
    return Contract(web3, bytecode, abi, address, account)


class Contract:

    def __init__(self, web3: Web3, bytecode: str, abi: str, address: str, account: LocalAccount = None, **init_args):
        self.web3 = web3
        self.bytecode = bytecode
        self.abi = abi
        self.address = address
        self.account = account
        # self.address = deploy(abi, bytecode, web3, private_key, **init_args)
        self.contract = web3.eth.contract(abi=abi, bytecode=bytecode)
        self.functions = self.contract.functions
        self.events = self.contract.events
        self.fallback = self.contract.fallback
        for func in self.contract.functions:
            # 通过方法名获取方法
            print(f'### func: {func}')
            setattr(self, func, getattr(self.contract.functions, func))

        # self._set_functions(contract.functions)
        # self._setattr(contract.variables)
        # self._setattr(contract.events)

    def call_selector(self, func):
        @wraps(func)
        def call_selector(*args, **kwargs):
            function_abi = find_matching_fn_abi(self.abi, func.__name__)
            if function_abi['stateMutability'] == 'view':
                tx = {
                    'chainId': 201018,
                    'nonce': self.web3.eth.getTransactionCount('atp1zkrxx6rf358jcvr7nruhyvr9hxpwv9uncjmns0'),
                    'gas': 2000000,
                    'value': 0,
                    'gasPrice': 1000000000,
                    'to': self.address
                }
                txn = func(*args, **kwargs).buildTransaction(tx)
                self.web3.eth.call(txn)
            else:
                tx = {
                    'chainId': 201018,
                    'nonce': self.web3.eth.getTransactionCount('atp1zkrxx6rf358jcvr7nruhyvr9hxpwv9uncjmns0'),
                    'gas': 2000000,
                    'value': 0,
                    'gasPrice': 1000000000,
                    'to': self.address
                }
                txn = func(*args, **kwargs).buildTransaction(tx)
                signed_txn = self.web3.eth.account.signTransaction(txn, private_key=self.owner.privateKey.hex())
                print(f'### signed_txn: {signed_txn}')
                res = self.web3.eth.sendRawTransaction(signed_txn.rawTransaction).hex()
                print(f'### res: {res}')

        return call_selector()

    # def _set_attrs(self, attrs):
    #     for attr in attrs:
    #         setattr(self, attr.__name__, attr)
    #
    # def _set_functions(self, functions):
    #     pass

# if __name__ == "main":
#     bytecode = ''
#     abi = [{"inputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"},{"internalType":"uint8","name":"decimals","type":"uint8"},{"internalType":"uint256","name":"cap","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burnFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getCap","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"mintTo","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"cap","type":"uint256"}],"name":"setCap","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}]
#     Defi = Contract(abi, bytecode, )
#     from_address = ''
#     to_address = ''
#     Defi.lockAsset(from_address, to_address, 10 * 10 ** 18)
#     assert Defi.amoute[''] = 10
